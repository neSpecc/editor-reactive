{"version":3,"sources":["../node_modules/html-dom-parser/lib/constants.js","../node_modules/html-dom-parser/lib/utilities.js","../node_modules/html-dom-parser/lib/domparser.js","../node_modules/html-dom-parser/lib/html-to-dom-client.js","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","dom.js","editor.js","plugin.js","index.js"],"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase","Dom","template","dataToBind","onChange","mustacheBindings","elementBindings","dataProxy","Proxy","data","parsed","el","create","node","type","createElementNode","createTextNode","unknownNode","document","createElement","classList","add","textContent","name","isHTMLBinded","Object","entries","attribs","forEach","key","value","setAttribute","isBinding","isContentEditable","undefined","variable","dataset","var","push","innerHTML","addEventListener","tag","children","console","warn","childNode","appendChild","text","originalText","vars","findVariables","isNew","querySelector","substituteVariable","match","varsRx","exec","trim","dataBinded","replace","RegExp","activeElement","tagName","toLowerCase","self","set","target","prop","receiver","Reflect","arguments","updateNodeWithData","get","Editor","tools","holder","toolsConfig","render","tool","toolClass","react","parseTemplate","getEl","window","change","pair","changeDataValue","JSON","stringify","blocks","map","getData","Plugin","family","caption","editor","getElementById","myTool"],"mappings":";AAKA,IAAA,EAAA,CACA,gBACA,mBACA,WACA,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACA,gBACA,iBACA,iBACA,YAGA,OAAA,QAAA,CACA,yBAAA;;ACpCA,IAJA,IAGA,EAHA,EAAA,QAAA,eAAA,yBAEA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,EAAA,eAAA,EASA,SAAA,EAAA,GACA,OAAA,EAAA,GASA,SAAA,EAAA,GAIA,IAHA,IACA,EADA,EAAA,GAGA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAEA,GADA,EAAA,EAAA,IACA,MAAA,EAAA,MAEA,OAAA,EAUA,SAAA,EAAA,GAEA,IAAA,EAAA,EADA,EAAA,EAAA,eAEA,OAAA,GAGA,EAWA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,KAQA,IANA,IACA,EACA,EACA,EAHA,EAAA,GAMA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CA4BA,OA3BA,EAAA,EAAA,GAEA,EAAA,CACA,KAAA,KACA,KAAA,EAAA,EAAA,IAAA,KACA,OAAA,IAIA,EAAA,EAAA,EAAA,MAEA,EAAA,KAAA,GAKA,MAAA,EAAA,SAAA,KACA,EAAA,KAAA,EAAA,EAAA,UAEA,EAAA,QAAA,GACA,EAAA,YAAA,EAAA,WAAA,SACA,EAAA,QAAA,EAAA,EAAA,cAMA,EAAA,UAEA,KAAA,EACA,WAAA,EAAA,MAAA,UAAA,EAAA,KACA,EAAA,KAAA,EAAA,KAEA,EAAA,KAAA,MAGA,EAAA,SAAA,EAAA,EAAA,WAAA,GACA,MAGA,KAAA,EACA,EAAA,KAAA,OACA,EAAA,KAAA,EAAA,UACA,MAEA,KAAA,EACA,EAAA,KAAA,UACA,EAAA,KAAA,EAAA,UAIA,EAAA,KAAA,GAkBA,OAfA,IACA,EAAA,QAAA,CACA,KAAA,EAAA,UAAA,EAAA,EAAA,QAAA,MAAA,cACA,KAAA,EACA,KAAA,YACA,KAAA,EAAA,GAAA,EAAA,GAAA,KACA,KAAA,KACA,OAAA,IAGA,EAAA,KACA,EAAA,GAAA,KAAA,EAAA,KAIA,EASA,SAAA,EAAA,GACA,OAAA,EACA,SAAA,eAAA,EAEA,2BAAA,KAAA,UAAA,WAGA,OAAA,QAAA,CACA,iBAAA,EACA,UAAA,EACA,KAAA;;AC9JA,IAAA,EAAA,QAAA,eAGA,EAAA,OACA,EAAA,OACA,EAAA,OACA,EAAA,qBACA,EAAA,YACA,EAAA,YAEA,EAAA,qGAGA,EAAA,EAAA,KAAA,GACA,EAAA,GAAA,EAAA,OAGA,EAAA,WACA,MAAA,IAAA,MACA,+EAIA,EAAA,WACA,MAAA,IAAA,MACA,wEASA,GAAA,mBAAA,OAAA,UAAA,CACA,IAAA,EAAA,IAAA,OAAA,UAIA,EAAA,EAAA,WAAA,YAsBA,EAbA,EAAA,SAAA,EAAA,GAUA,OATA,IACA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAIA,IACA,EAAA,EAAA,QAAA,EAAA,cAGA,EAAA,gBAAA,EAAA,IAWA,GAAA,SAAA,eAAA,CAGA,IAAA,EAAA,SAAA,eAAA,mBACA,EAAA,uBAAA,GAUA,EAAA,SAAA,EAAA,GACA,GAAA,EAEA,OADA,EAAA,gBAAA,qBAAA,GAAA,GAAA,UAAA,EACA,EAGA,IAEA,OADA,EAAA,gBAAA,UAAA,EACA,EAEA,MAAA,GACA,GAAA,EACA,OAAA,EAAA,KAWA,IACA,EADA,EAAA,SAAA,cAAA,YAsBA,SAAA,EAAA,GACA,IAAA,EAOA,EACA,EACA,EARA,EAAA,EAAA,MAAA,GAUA,OARA,GAAA,EAAA,KACA,EAAA,EAAA,GAAA,eAOA,GACA,KAAA,EAmBA,OAlBA,EAAA,EAAA,GAIA,EAAA,KAAA,KACA,EAAA,EAAA,qBAAA,GAAA,KAEA,EAAA,WAAA,YAAA,GAIA,EAAA,KAAA,KACA,EAAA,EAAA,qBAAA,GAAA,KAEA,EAAA,WAAA,YAAA,GAIA,EAAA,qBAAA,GAEA,KAAA,EACA,KAAA,EAIA,OAHA,EAAA,EAAA,GAAA,qBAAA,GAGA,EAAA,KAAA,IAAA,EAAA,KAAA,GACA,EAAA,GAAA,WAAA,WAEA,EAGA,QACA,OAAA,EACA,EAAA,GAGA,EAAA,EAAA,GAAA,qBAAA,GAAA,GACA,YAtEA,EAAA,UAOA,EAAA,SAAA,GAEA,OADA,EAAA,UAAA,EACA,EAAA,QAAA,aAiEA,OAAA,QAAA;;ACvLA,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,eAEA,EAAA,EAAA,UACA,EAAA,EAAA,KAAA,GAEA,EAAA,mBAQA,SAAA,EAAA,GACA,GAAA,iBAAA,EACA,MAAA,IAAA,UAAA,mCAGA,IAAA,EACA,MAAA,GAIA,IACA,EADA,EAAA,EAAA,MAAA,GAaA,OAVA,GAAA,EAAA,KACA,EAAA,EAAA,GAIA,IACA,EAAA,EAAA,QAAA,EAAA,GAAA,MAIA,EAAA,EAAA,GAAA,KAAA,GAGA,OAAA,QAAA;;ACtCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAAA,IAAIA,EACF,mEADF,QAAA,YAAA;;AC2EA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,QAAA,OAAA,QAAA,aAAA,QAAA,eAAA,QAAA,YAAA,EA1EA,IAAA,EAAA,QAAA,2BA+BA,IAAIC,EAAS,SAAAC,GAASC,OAAAA,OAAOC,gBAAgB,IAAIC,WAAWH,KA2C5D,QAAA,OAAA,EAzCA,IAAII,EAAe,SAACC,EAAUC,EAAMC,GAM9BC,IAAAA,GAAQ,GAAMC,KAAKC,IAAIL,EAASM,OAAS,GAAKF,KAAKG,KAAQ,EAgB3DC,KAAW,IAAML,EAAOF,EAAQD,EAASM,QAEtC,OAAA,WAEE,IADHG,IAAAA,EAAK,KAKAC,IAHHf,IAAAA,EAAQO,EAAUM,GAElBE,EAAIF,EACDE,KAGDD,IADJA,GAAMT,EAASL,EAAMe,GAAKP,IAAS,IAC5BG,SAAWL,EAAM,OAAOQ,IAQvC,QAAA,aAAA,EAFA,IAAIE,EAAiB,SAACX,EAAUC,GAASF,OAAAA,EAAaC,EAAUC,EAAMP,IAEtE,QAAA,eAAA,EAAA,IAAIkB,EAAS,WAKJX,IALKA,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACfQ,EAAK,GACLd,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWG,IAG3CA,KAAQ,CAMTY,IAAAA,EAAqB,GAAdlB,EAAMM,GAGfQ,GAFEI,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGHJ,OAAAA,GAxBT,QAAA,OAAA;;ACpBK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzDL,IAAA,EAAA,EAAA,QAAA,oBACA,EAAA,QAAA,UAwDK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAtDgBO,IAAAA,EAAAA,WACLC,SAAAA,EAAAA,EAAUC,EAAYC,GAAS,EAAA,KAAA,GAIlCC,KAAAA,iBAAmB,GAKnBC,KAAAA,gBAAkB,GAKlBC,KAAAA,UAAY,IAAIC,MAAML,EAAY,KAAKM,MAKtCC,IAAAA,GAAS,EAAMR,EAAAA,SAAAA,GAAU,GAK1BS,KAAAA,GAAK,KAAKC,OAAOF,GAKjBN,KAAAA,SAAWA,EAwBnB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAEMS,MAAAA,SAAAA,GACKA,OAAAA,EAAKC,MACJ,IAAA,MACA,IAAA,SACM,OAAA,KAAKC,kBAAkBF,GAC7B,IAAA,OACM,OAAA,KAAKG,eAAeH,EAAKJ,MAIlCQ,IAAAA,EAAcC,SAASC,cAAc,OAKpCF,OAHPA,EAAYG,UAAUC,IAAI,WAC1BJ,EAAYK,YAAc,sBAAwBT,EAAKC,KAEhDG,IAjBV,CAAA,IAAA,oBAoBiBJ,MAAAA,SAAAA,GAAK,IAAA,EAAA,KACbF,EAAKO,SAASC,cAAcN,EAAKU,MAKnCC,GAAe,EAKnBC,OAAOC,QAAQb,EAAKc,SAASC,QAAQ,SAAkB,GAAA,IAAA,EAAA,EAAA,EAAA,GAAhBC,EAAgB,EAAA,GAAXC,EAAW,EAAA,GACnDnB,EAAGoB,aAAaF,EAAKC,KAGnBE,IAAAA,EAAYnB,EAAKc,QAAL,KACZM,OAAwDC,IAApCrB,EAAKc,QAAL,iBAA+D,UAAdd,EAAKU,KAK5ES,GAAAA,EAAU,CACJG,IAAAA,EAAWtB,EAAKc,QAAL,KAEjBhB,EAAGyB,QAAQC,IAAMF,EAEjBX,GAAe,EAEVlB,KAAAA,gBAAgBgC,KAAK,CACtBH,SAAAA,EACAtB,KAAMF,IAMQ,UAAdE,EAAKU,KACLZ,EAAGmB,MAAQ,KAAKvB,UAAU4B,GAE1BxB,EAAG4B,UAAY,KAAKhC,UAAU4B,GAM9BF,GACAtB,EAAG6B,iBAAiB,QAAS,WACzB,EAAKjC,UAAU4B,GAA0B,UAAdtB,EAAKU,KAAmBZ,EAAGmB,MAAQnB,EAAG4B,YAkBtE5B,OAZPA,EAAGyB,QAAQK,IAAM5B,EAAKU,KAElBC,GAAgBX,EAAK6B,SAASnD,QAC9BoD,QAAQC,KAAK,gEAAiEjC,GAG7Ea,GACDX,EAAK6B,SAASd,QAAQ,SAAAiB,GAClBlC,EAAGmC,YAAY,EAAKlC,OAAOiC,MAI5BlC,IArFV,CAAA,IAAA,iBAwFcoC,MAAAA,SAAAA,EAAMrD,GAAG,IAGhBmB,EAHgB,EAAA,KACdmC,EAAeD,EACfE,EAAO,KAAKC,cAAcH,GAG1BI,GAASzD,EAiCRmB,OA3BFsC,GAGDzD,GAAK,EAAO,EAAA,QAAA,IACZmB,EAAOK,SAASC,cAAc,SACzBiB,QAAQ1C,GAAKA,GAJlBmB,EAAOK,SAASkC,cAA2B1D,aAAAA,OAAAA,EAA3C,OAOAuD,EAAK1D,QACL0D,EAAKrB,QAAQ,SAAAO,GACTY,EAAO,EAAKM,mBAAmBN,EAAMZ,GAEjCgB,GACA,EAAK9C,iBAAiBiC,KAAK,CACvBH,SAAAA,EACAtB,KAAAA,EACAkC,KAAMC,EACNtD,GAAAA,MAKZmB,EAAK0B,UAAYQ,GAEjBlC,EAAOK,SAASF,eAAe+B,GAG5BlC,IA9HV,CAAA,IAAA,gBAqIakC,MAAAA,SAAAA,GAMHO,IALDC,IAAAA,EAAS,wBAEXD,EAAQC,EAAOC,KAAKT,GACpBE,EAAO,GAEK,MAATK,GACHL,EAAKX,KAAKgB,EAAM,GAAGG,QAEnBH,EAAQC,EAAOC,KAAKT,GAGjBE,OAAAA,IAjJV,CAAA,IAAA,qBAyJkBF,MAAAA,SAAAA,EAAMZ,GAIjBuB,OAHe,KAAKnD,UAAU4B,GAIvBY,EAAKY,QACR,IAAIC,OAAO,YAAezB,EAJpB,aAMaA,mBAAAA,OAAAA,EACb,4BAAA,OAAA,KAAK5B,UAAU4B,GAJzB,8BASGY,IAvKV,CAAA,IAAA,QA+KM,MAAA,WACI,OAAA,KAAKpC,KAhLf,CAAA,IAAA,kBAwLeY,MAAAA,SAAAA,EAAMO,GACbvB,KAAAA,UAAUgB,GAAQO,IAzL1B,CAAA,IAAA,qBA+LkBP,MAAAA,SAAAA,EAAMO,GAAM,IAAA,EAAA,KACtBzB,KAAAA,iBAAiBuB,QAAQ,SAAgC,GAA9BO,IAAAA,EAAAA,EAAAA,SAAgBY,GAANlC,EAAAA,KAAMkC,EAAAA,MAAMrD,EAAAA,EAAAA,GAC9CyC,IAAaZ,GAIjB,EAAKP,eAAe+B,EAAMrD,KAIzBY,KAAAA,gBAAgBsB,QAAQ,SAA0B,GAAxBO,IAAAA,EAAAA,EAAAA,SAAUtB,EAAAA,EAAAA,KAAMnB,EAAAA,GACvCyC,IAAaZ,GAObL,SAAS2C,gBAAkBhD,IAII,UAA/BA,EAAKiD,QAAQC,cACblD,EAAKiB,MAAQA,EAEbjB,EAAK0B,UAAYT,KAIpB1B,KAAAA,aA5NR,CAAA,IAAA,UA+NQ,MAAA,WACE,OAAA,KAAKG,YAhOf,CAAA,IAAA,OAlBS,IAAA,WACAyD,IAAAA,EAAO,KAEN,MAAA,CACHC,IAAIC,SAAAA,EAAQC,EAAMrC,EAAOsC,GAQd,OAPPC,QAAQJ,IAARI,MAAAA,QAAeC,WAKfN,EAAKO,mBAAmBJ,EAAMrC,IAEvB,GAEX0C,IAAIN,SAAAA,EAAQC,EAAMC,GACPC,OAAAA,QAAQG,IAARH,MAAAA,QAAeC,iBAGjC,EAtDgBrE,GAsDhB,QAAA,QAAA;;ACUA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnEL,IAAA,EAAA,EAAA,QAAA,UAmEK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjEgBwE,IAAAA,EAAAA,WACW,SAAA,EAAA,GAAfC,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQ,EAAA,KAAA,GACnBC,KAAAA,YAAcF,EACdC,KAAAA,OAASA,EAKTD,KAAAA,MAAQ,GAERG,KAAAA,SAKAzE,KAAAA,WAkDR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SA/CO,MAAA,WAAA,IAAA,EAAA,KAIJqB,OAAOC,QAAQ,KAAKkD,aAAahD,QAAQ,SAAuB,GAAA,IAAA,EAAA,EAAA,EAAA,GAArBL,EAAqB,EAAA,GACtDuD,EAAO,IAAIC,EAD2C,EAAA,IAEtDC,EAAQ,EAAKC,cAAcH,EAAK5E,SAASuD,OAAQqB,EAAKrE,MAE5D,EAAKkE,OAAO7B,YAAYkC,EAAME,SAE9B,EAAKR,MAAMnD,GAAQ,CACfuD,KAAAA,EACAE,MAAAA,OAmCX,CAAA,IAAA,gBA9Ba9E,MAAAA,SAAAA,EAAUC,GAAW,IAAA,EAAA,KAIzB6E,EAAQ,IAAI/E,EAAJ,QAAQC,EAAUC,EAAY,WACxC,EAAKC,aAaF4E,OANPG,OAAOC,OAAS,SAASC,GACrB5D,OAAOC,QAAQ2D,GAAMzD,QAAQ,SAAkB,GAAA,IAAA,EAAA,EAAA,EAAA,GAAhBC,EAAgB,EAAA,GAAXC,EAAW,EAAA,GAC3CkD,EAAMM,gBAAgBzD,EAAKC,MAI5BkD,IAYV,CAAA,IAAA,WATS,MAAA,WACN9D,SAASkC,cAAc,eAAeb,UAAYgD,KAAKC,UAAU,CAC7DC,OAAQhE,OAAOC,QAAQ,KAAKgD,OAAOgB,IAAI,SAA2B,GAAA,IAAA,EAAA,EAAA,EAAA,GAAzBnE,EAAyB,EAAA,GAAA,EAAA,EAAA,GAAlBuD,EAAAA,KACrC,MAAA,CACHhE,KAAMS,EACNd,KAH8CuE,EAAAA,MAGlCW,mBAGrBzD,EAAW,WACjB,EAjEgBuC,GAiEhB,QAAA,QAAA;;ACnCA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1BgBmB,IAAAA,EAAAA,WACJ,SAAA,IAAA,EAAA,KAAA,GAyBZ,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WAtBa,IAAA,WACV,MAAA,kcAqBH,CAAA,IAAA,OANS,IAAA,WACC,MAAA,CACHrE,KAAM,QACNsE,OAAQ,WACRC,QAAS,gCAEhB,EA1BgBF,GA0BhB,QAAA,QAAA;;AC7BL,aAHA,IAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,aAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAMG,EAAS,IAAItB,EAAJ,QAAW,CACtBE,OAAQzD,SAAS8E,eAAe,UAChCtB,MAAO,CACHuB,OAAQL,EAAAA","file":"src.ca01df12.js","sourceRoot":"../src","sourcesContent":["/**\n * SVG elements are case-sensitive.\n *\n * @see {@link https://developer.mozilla.org/docs/Web/SVG/Element#SVG_elements_A_to_Z}\n */\nvar CASE_SENSITIVE_TAG_NAMES = [\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussainBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'linearGradient',\n  'radialGradient',\n  'textPath'\n];\n\nmodule.exports = {\n  CASE_SENSITIVE_TAG_NAMES: CASE_SENSITIVE_TAG_NAMES\n};\n","var CASE_SENSITIVE_TAG_NAMES = require('./constants').CASE_SENSITIVE_TAG_NAMES;\n\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n\n/**\n * Gets case-sensitive tag name.\n *\n * @param  {String}           tagName - The lowercase tag name.\n * @return {String|undefined}\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param  {NamedNodeMap} attributes - The list of attributes.\n * @return {Object}                  - A map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute;\n  // `NamedNodeMap` is array-like\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n  return result;\n}\n\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param  {String} tagName - The lowercase tag name.\n * @return {String}         - The formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n\n/**\n * Formats the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.\n *\n * @param  {NodeList} nodes        - The DOM nodes.\n * @param  {Object}   [parentObj]  - The formatted parent node.\n * @param  {String}   [directive]  - The directive.\n * @return {Object[]}              - The formatted DOM object.\n */\nfunction formatDOM(nodes, parentObj, directive) {\n  parentObj = parentObj || null;\n\n  var result = [];\n  var node;\n  var prevNode;\n  var nodeObj;\n\n  // `NodeList` is array-like\n  for (var i = 0, len = nodes.length; i < len; i++) {\n    node = nodes[i];\n    // reset\n    nodeObj = {\n      next: null,\n      prev: result[i - 1] || null,\n      parent: parentObj\n    };\n\n    // set the next node for the previous node (if applicable)\n    prevNode = result[i - 1];\n    if (prevNode) {\n      prevNode.next = nodeObj;\n    }\n\n    // set the node name if it's not \"#text\" or \"#comment\"\n    // e.g., \"div\"\n    if (node.nodeName[0] !== '#') {\n      nodeObj.name = formatTagName(node.nodeName);\n      // also, nodes of type \"tag\" have \"attribs\"\n      nodeObj.attribs = {}; // default\n      if (node.attributes && node.attributes.length) {\n        nodeObj.attribs = formatAttributes(node.attributes);\n      }\n    }\n\n    // set the node type\n    // e.g., \"tag\"\n    switch (node.nodeType) {\n      // 1 = element\n      case 1:\n        if (nodeObj.name === 'script' || nodeObj.name === 'style') {\n          nodeObj.type = nodeObj.name;\n        } else {\n          nodeObj.type = 'tag';\n        }\n        // recursively format the children\n        nodeObj.children = formatDOM(node.childNodes, nodeObj);\n        break;\n      // 2 = attribute\n      // 3 = text\n      case 3:\n        nodeObj.type = 'text';\n        nodeObj.data = node.nodeValue;\n        break;\n      // 8 = comment\n      case 8:\n        nodeObj.type = 'comment';\n        nodeObj.data = node.nodeValue;\n        break;\n    }\n\n    result.push(nodeObj);\n  }\n\n  if (directive) {\n    result.unshift({\n      name: directive.substring(0, directive.indexOf(' ')).toLowerCase(),\n      data: directive,\n      type: 'directive',\n      next: result[0] ? result[0] : null,\n      prev: null,\n      parent: parentObj\n    });\n\n    if (result[1]) {\n      result[1].prev = result[0];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Detects IE with or without version.\n *\n * @param  {Number}  [version] - The IE version to detect.\n * @return {Boolean}           - Whether IE or the version has been detected.\n */\nfunction isIE(version) {\n  if (version) {\n    return document.documentMode === version;\n  }\n  return /(MSIE |Trident\\/|Edge\\/)/.test(navigator.userAgent);\n}\n\nmodule.exports = {\n  formatAttributes: formatAttributes,\n  formatDOM: formatDOM,\n  isIE: isIE\n};\n","var utilities = require('./utilities');\n\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;\n\n// detect IE browser\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n\n  // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(\n    isIE ? 'html-dom-parser' : undefined\n  );\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc;\n      // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0]\n        .childNodes;\n  }\n}\n\nmodule.exports = domparser;\n","var domparser = require('./domparser');\nvar utilities = require('./utilities');\n\nvar formatDOM = utilities.formatDOM;\nvar isIE9 = utilities.isIE(9);\n\nvar DIRECTIVE_REGEX = /<(![a-zA-Z\\s]+)>/; // e.g., <!doctype html>\n\n/**\n * Parses HTML and reformats DOM nodes output.\n *\n * @param  {String} html - The HTML string.\n * @return {Array}       - The formatted DOM nodes.\n */\nfunction parseDOM(html) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!html) {\n    return [];\n  }\n\n  // match directive\n  var match = html.match(DIRECTIVE_REGEX);\n  var directive;\n\n  if (match && match[1]) {\n    directive = match[1];\n\n    // remove directive in IE9 because DOMParser uses\n    // MIME type 'text/xml' instead of 'text/html'\n    if (isIE9) {\n      html = html.replace(match[0], '');\n    }\n  }\n\n  return formatDOM(domparser(html), null, directive);\n}\n\nmodule.exports = parseDOM;\n","// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nexport { urlAlphabet }\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID. If you use Expo, install `expo-random` ' +\n        'and use `nanoid/async`.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import parse from 'html-dom-parser';\nimport { nanoid } from 'nanoid';\n\nexport default class Dom {\n    constructor(template, dataToBind, onChange){\n        /**\n         * Saved bindings for mustache inside text - {{ variable }}\n         */\n        this.mustacheBindings = [];\n\n        /**\n         * Saved bindings for «bind=\"variable\"»\n         */\n        this.elementBindings = [];\n\n        /**\n        * Create Proxy from Plugin's data to pass it to the Dom\n        */\n        this.dataProxy = new Proxy(dataToBind, this.data);\n        \n        /**\n         * Parse string\n         */\n        const parsed = parse(template)[0]\n\n        /**\n         * Render DOM\n         */\n        this.el = this.create(parsed)\n\n        /**\n         * Save onChange callback\n         */\n        this.onChange = onChange;\n    }\n\n    /**\n     * Data proxy handler\n     */\n    get data(){\n        const self = this;\n\n        return {\n            set(target, prop, value, receiver){\n                Reflect.set(...arguments);\n\n                /**\n                 * Update DOM\n                 */\n                self.updateNodeWithData(prop, value);\n\n                return true;\n            },\n            get(target, prop, receiver){\n                return Reflect.get(...arguments);\n            }\n        }\n    }\n\n    create(node){\n        switch (node.type){\n            case 'tag': \n            case 'script': \n                return this.createElementNode(node)\n            case 'text': \n                return this.createTextNode(node.data)\n\n        }\n\n        const unknownNode = document.createElement('div');\n\n        unknownNode.classList.add('unknown')\n        unknownNode.textContent = 'Unknown node type: ' + node.type;\n\n        return unknownNode;\n    }\n\n    createElementNode(node){\n        const el = document.createElement(node.name);\n\n        /**\n         * If bind=\"variable\" passed, we will skip all children content\n         */\n        let isHTMLBinded = false;\n\n        /**\n         * Add attributes\n         */\n        Object.entries(node.attribs).forEach(([key, value]) => {\n            el.setAttribute(key, value)\n        })\n\n        const isBinding = node.attribs['bind'];\n        const isContentEditable = node.attribs['contenteditable'] !== undefined || node.name === 'input';\n\n        /**\n         * Process variable binding\n         */\n        if (isBinding){\n            const variable = node.attribs['bind'];\n\n            el.dataset.var = variable;\n            \n            isHTMLBinded = true;\n\n            this.elementBindings.push({\n                variable,\n                node: el,\n            })\n            \n            /**\n             * Set initial content from data\n             */\n            if (node.name === 'input'){\n                el.value = this.dataProxy[variable]\n            } else {\n                el.innerHTML = this.dataProxy[variable];\n            }\n\n            /**\n             * Watch changes if case of contenteditable\n             */\n            if (isContentEditable){\n                el.addEventListener('input', () => {\n                    this.dataProxy[variable] = node.name === 'input' ? el.value : el.innerHTML;\n                })\n            }\n        }\n        \n\n        el.dataset.tag = node.name;\n\n        if (isHTMLBinded && node.children.length){\n            console.warn('Element with the \"bind\" attribute should not contain anything', el)\n        }\n\n        if (!isHTMLBinded){\n            node.children.forEach(childNode => {\n                el.appendChild(this.create(childNode));\n            });\n        }\n\n        return el;\n    }\n\n    createTextNode(text, id){\n        const originalText = text;\n        const vars = this.findVariables(text);\n        let node;\n\n        const isNew = !id;\n\n        /**\n         * If id passed, just update innerHTML\n         * Otherwise create new element and save it to the bindings\n         */\n        if (!isNew) {   \n            node = document.querySelector(`[data-id=\"${id}\"]`);\n        } else {\n            id = nanoid(5);\n            node = document.createElement('span');\n            node.dataset.id = id;\n        }\n\n        if (vars.length){\n            vars.forEach(variable => {\n                text = this.substituteVariable(text, variable)                \n\n                if (isNew) {\n                    this.mustacheBindings.push({\n                        variable,\n                        node,\n                        text: originalText,\n                        id\n                    })\n                }\n            })\n\n            node.innerHTML = text;\n        } else {\n            node = document.createTextNode(text);\n        }\n\n        return node;\n    }\n\n    /**\n     * Return array of mustache variables\n     * «My name is {{ name }} {{ family }}» -> [\"name\", \"family\"]\n     */\n    findVariables(text){\n        const varsRx = /{{([ a-zA-Z0-9-]+)}}/g;\n\n        let match = varsRx.exec(text);\n        let vars = []\n\n        while (match != null) {\n            vars.push(match[1].trim());\n\n            match = varsRx.exec(text);\n        }\n\n        return vars;\n    }\n\n    /**\n     * Replace mustaches with values\n     * \n     * «Hello, {{ name }}»  --> «Hello, Jerom»\n     */\n    substituteVariable(text, variable){\n        const dataBinded = this.dataProxy[variable];\n        const space = '(\\\\s+)?';\n\n        if (dataBinded){\n            return text.replace(\n                new RegExp('{{' + space + variable + space + '}}'), \n                // <span> is used only for demo-highlighting\n                `<span data-var=\"${variable}\">\n                    ${this.dataProxy[variable]}\n                </span>`\n            );\n        }\n\n        return text;\n    }\n\n    /**\n     * Returns rendered element\n     * \n     * @public\n     */\n    getEl(){\n        return this.el;\n    }\n\n    /**\n     * External data setter \n     * \n     * @public\n     */\n    changeDataValue(name, value){\n        this.dataProxy[name] = value;\n    }\n\n    /**\n     * Update DOM by updating data\n     */\n    updateNodeWithData(name, value){\n        this.mustacheBindings.forEach(({variable, node, text, id}) => {\n            if (variable !== name){\n                return;\n            }\n\n            this.createTextNode(text, id);\n        })\n        \n\n        this.elementBindings.forEach(({variable, node, id}) => {\n            if (variable !== name){\n                return;\n            }\n\n            /**\n             * Prevent caret jumping\n             */\n            if (document.activeElement === node){\n                return;\n            }\n\n            if (node.tagName.toLowerCase() === 'input'){\n                node.value = value\n            } else {\n                node.innerHTML = value;\n            }\n        })\n\n        this.onChange();\n    }\n\n    getData(){\n        return this.dataProxy;\n    }\n}\n","import Dom from './dom';\n\nexport default class Editor {\n    constructor({tools, holder}){\n        this.toolsConfig = tools;\n        this.holder = holder;\n\n        /**\n         * Will be stored tools classes\n         */\n        this.tools = {};\n\n        this.render();\n\n        /**\n         * For displaying the output on demo page\n         */\n        this.onChange();\n    }\n\n    render(){\n        /**\n         * Iterate over tools\n         */\n        Object.entries(this.toolsConfig).forEach(([name, toolClass]) => {\n            const tool = new toolClass();\n            const react = this.parseTemplate(tool.template.trim(), tool.data);\n\n            this.holder.appendChild(react.getEl());\n\n            this.tools[name] = {\n                tool,\n                react\n            };\n        });\n    }\n\n    parseTemplate(template, dataToBind){\n        /**\n         * Create Dom structure with bindings\n         */\n        const react = new Dom(template, dataToBind, () => {\n            this.onChange();\n        });\n     \n        /**\n         * Temporary.\n         * Expose method for changing the data from outside.\n         */\n        window.change = function(pair){\n            Object.entries(pair).forEach(([key, value]) => {\n                react.changeDataValue(key, value);\n            })\n        }\n        \n        return react;\n    }\n\n    onChange(){\n        document.querySelector('.output pre').innerHTML = JSON.stringify({\n            blocks: Object.entries(this.tools).map(([name, {tool, react}]) => {\n                return {\n                    type: name,\n                    data: react.getData(),\n                }\n            })\n        }, undefined, '   ')\n    }\n}","/**\n * Example of tool\n * - has the `template` instead of `render()`\n * - provide data structure via `get data()`\n * - all bindings from data to template on the editor side\n */\nexport default class Plugin { \n    constructor(){\n    }\n\n    get template(){\n        return `\n            <div>\n                <p>My name is {{ name }} {{ family }}. {{ name }} is a good man.</p>\n                \n                <p>Enter caption (div):</p>\n                <div contenteditable bind=\"caption\"></div>\n                \n                <p>Enter caption (input):</p>\n                <input bind=\"caption\"/>\n                \n                <div>And the caption is: {{ caption }}</div> \n            </div>\n        `\n    }\n\n    get data(){\n        return {\n            name: 'Jerom',\n            family: 'Kawasaki',\n            caption: 'Apple Developers Program'\n        }\n    }\n}","import Editor from './editor';\nimport Plugin from './plugin';\n\nconst editor = new Editor({\n    holder: document.getElementById('editor'),\n    tools: {\n        myTool: Plugin,\n    }\n})\n\n"]}